name: reStructuredPython automated PR Labeling
on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  update-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Parse comment and update PR labels
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = context.payload.issue.number;
            const labelsToAdd = [];
            const labelsToRemove = [];
            
            // Fetch all comments on the PR
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const status = { windows: false, mac: false, ubuntu: false };
            
            // Loop through comments to determine status
            comments.data.forEach(comment => {
              const text = comment.body.trim();
              if (text.startsWith("!windows-passing")) status.windows = true;
              if (text.startsWith("!windows-failing")) status.windows = false;
              if (text.startsWith("!mac-passing")) status.mac = true;
              if (text.startsWith("!mac-failing")) status.mac = false;
              if (text.startsWith("!ubuntu-passing")) status.ubuntu = true;
              if (text.startsWith("!ubuntu-failing")) status.ubuntu = false;
            });
            
            const allPassing = status.windows && status.mac && status.ubuntu;
            const anyFailing = !status.windows || !status.mac || !status.ubuntu;
            
            if (allPassing) {
              labelsToAdd.push("awaiting merge");
              labelsToRemove.push("DO-NOT-MERGE");
            } else if (anyFailing) {
              labelsToAdd.push("DO-NOT-MERGE");
              labelsToRemove.push("awaiting merge");
            }
            
            // Apply label changes only if necessary
            if (labelsToAdd.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: labelsToAdd
              });
            }
            
            for (const label of labelsToRemove) {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                name: label
              }).catch(() => {});
            }
