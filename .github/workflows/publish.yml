name: Publish Python Package

on:
  push:
    branches:
      - main  # Trigger the workflow only on pushes to the 'main' branch
    paths:
      - pyproject.toml
  workflow_dispatch:

permissions:
  contents: write  # Allow the action to push to the repository

jobs:
  lint-and-fix:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install autopep8

      - name: Apply autopep8 fixes
        run: |
          autopep8 --in-place --aggressive --aggressive $(git ls-files '*.py' | grep -vE '(^tests/|^docs/)')

      # Step 6: Commit and push changes directly to the main branch
      - name: Commit and push changes to main branch
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git checkout main
          git add .
          git diff --cached --quiet || git commit -m "Auto-fix Linter and apply autopep8 changes"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, windows-11-arm, macos-13, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5

      - name: Install cibuildwheel
        run: python -m pip install --upgrade pip cibuildwheel setuptools wheel toml

      - name: Build wheels
        run: python -m cibuildwheel
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
  build_sdist:
    name: Make SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Optional, use if you use setuptools_scm
        submodules: true  # Optional, use if you have submodules

    - name: Build SDist
      run: pipx run build --sdist

    - uses: actions/upload-artifact@v4
      with:
        name: cibw-sdist
        path: dist/*.tar.gz

  publish:
    runs-on: ubuntu-latest
    needs: [build, build_sdist]
    environment:
      name: pypi
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml
      - name: Extract version from pyproject.toml
        id: extract_version
        run: |
          python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])" > version.txt
          echo "release_version=$(cat version.txt)" >> $GITHUB_ENV

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Create a GitHub release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ env.release_version }}"
          name: "${{ env.release_version }}"
          files: |
            dist/*
          body: |
            View the [changelog](https://restructuredpython.readthedocs.io/en/latest/changelog.html) for information about this release.
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

  
