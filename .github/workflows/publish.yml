name: Publish Python Package

on:
  push:
    branches:
      - main  # Trigger the workflow only on pushes to the 'main' branch
    paths:
      - pyproject.toml
  workflow_dispatch:

permissions:
  contents: write  # Allow the action to push to the repository

jobs:
  lint-and-fix:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint autopep8

      # Step 4: Run pylint on specified files
      - name: Run pylint on specified files
        id: pylint
        run: |
          pylint_output=$(pylint $(git ls-files '*.py' | grep -vE '(^tests/|^docs/)') --output-format=text) || true
          echo "$pylint_output"
          echo "::set-output name=pylint_output::$pylint_output"

      # Step 5: Apply autopep8 fixes
      - name: Apply autopep8 fixes
        run: |
          autopep8 --in-place --aggressive --aggressive $(git ls-files '*.py' | grep -vE '(^tests/|^docs/)')

      # Step 6: Commit and push changes directly to the main branch
      - name: Commit and push changes to main branch
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git checkout main
          git add .
          git diff --cached --quiet || git commit -m "Auto-fix Linter and apply autopep8 changes"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Compile for Windows (32-bit & 64-bit)
        run: |
          clang -shared -m32 -o restructuredpython/lib/io32.dll restructuredpython/include/io.c
          clang -shared -m64 -o restructuredpython/lib/io64.dll restructuredpython/include/io.c
          
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-libs
          path: restructuredpython/lib/io*.dll

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Compile for Linux (.so)
        run: |
          gcc -shared -fPIC -o restructuredpython/lib/io.so restructuredpython/include/io.c
          
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-libs
          path: restructuredpython/lib/io.so

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Compile for macOS (.dylib)
        run: |
          clang -shared -o restructuredpython/lib/io.dylib restructuredpython/include/io.c
          
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-libs
          path: restructuredpython/lib/io.dylib
  publish:
    runs-on: windows-latest
    needs: [build-windows, build-linux, build-macos]
    environment:
      name: pypi
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download all compiled libraries
        uses: actions/download-artifact@v3
        with:
          path: restructuredpython/lib/

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine setuptools wheel build toml

      - name: Build the package with compiled shared libraries
        run: |
          python -m build

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Create a GitHub release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ env.release_version }}"
          name: "${{ env.release_version }}"
          files: |
            dist/*.whl
            dist/*.tar.gz
          body: |
            View the [changelog](https://restructuredpython.readthedocs.io/en/latest/changelog.html) for information about this release.
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

  